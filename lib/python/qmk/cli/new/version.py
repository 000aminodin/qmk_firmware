"""Increment the QMK version.
"""
from pathlib import Path
from subprocess import DEVNULL, PIPE
import re

from milc import cli

from qmk.commands import run


version_pattern = re.compile(r'\d+\.\d+\.\d+')
version_h = """// This file is automatically generated. Do not edit!"
#define QMK_VERSION "%(qmk)s"
#define CHIBIOS_VERSION "%(chibios)s"
#define CHIBIOS_CONTRIB_VERSION "%(chibios_contrib)s"
"""


def git_description(cwd=None):
    """Get the description from git.

    Args:

        cwd
            The directory to run this command in.
    """
    git_describe_cmd = ['git', 'describe', '--abbrev=6', '--always', '--tags']
    git_describe = run(git_describe_cmd, cwd=cwd, stdout=PIPE, stderr=DEVNULL, universal_newlines=True)

    return git_describe.stdout.strip()


def get_latest_version(cwd=None):
    """Get the latest version tag from git.

    Args:

        cwd
            The directory to run this command in.
    """
    git_tags_cmd = ['git', 'tag', '--sort=-creatordate', '--no-column', '--list', '*.*.*']
    git_tags = run(git_tags_cmd, cwd=cwd, stdout=PIPE, stderr=DEVNULL, universal_newlines=True)

    for line in git_tags.stdout.splitlines():
        if line.replace('.', '').isdigit():
            return line


@cli.argument('--commit', action='store_true', help='Write the changes out and commit them')
@cli.argument('--major', action='store_true', arg_only=True, help='Bump the major version')
@cli.argument('--minor', action='store_true', arg_only=True, help='Bump the minor version')
@cli.subcommand('Increment the QMK version.', hidden=False if cli.config.user.developer else True)
def new_version(cli):
    """Increment the QMK version.
    """
    if cli.args.major and cli.args.minor:
        cli.log.warning('Both --major and --minor specified, --minor will be ignored!')

    # Find the latest version tags from git.
    qmk_version = get_latest_version()
    chibios_version = git_description('lib/chibios')
    chibios_contrib_version = git_description('lib/chibios-contrib')

    # Increment the version
    major, minor, patch = qmk_version.split('.')

    if cli.args.major:
        major = str(int(major) + 1)
        minor = "0"
        patch = "0"
    elif cli.args.minor:
        minor = str(int(minor) + 1)
        patch = "0"
    else:
        patch = str(int(patch) + 1)

    new_version = {
        'qmk': '.'.join([major, minor, patch]),
        'chibios': chibios_version,
        'chibios_contrib': chibios_contrib_version,
    }

    # Create a new version.h file
    if cli.args.commit:
        version_h_file = Path('quantum/version.h')
        version_h_file.write_text(version_h % new_version)
        cli.log.info('New version written to quantum/version.h.')
        # FIXME: git commit here
    else:
        print(version_h % new_version, end='')
